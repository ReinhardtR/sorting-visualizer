{"version":3,"sources":["SortingAlgorithms/mergeSort.js","SortingVisualizer/SortingVisualizer.jsx","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","i","j","k","push","doMerge","SortingVisualizer","props","state","this","generateRandomArray","document","getElementsByClassName","arrayBars","style","backgroundColor","min","max","random","setState","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","height","id","onClick","mergeSort","quickSort","heapSort","bubbleSort","testSortingAlgorithms","className","map","value","idx","React","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.81d6507e.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  let k = startIdx;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./SortingVisualizer.css\";\r\n\r\n// Sorting Algorithms\r\nimport { getMergeSortAnimations } from \"../SortingAlgorithms/mergeSort.js\";\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 3;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 100;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = \"turquoise\";\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = \"red\";\r\n\r\nexport class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.generateRandomArray();\r\n  }\r\n\r\n  generateRandomArray() {\r\n    if (document.getElementsByClassName(\"array-bar\") !== 0) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      for (let arrayBar of arrayBars) {\r\n        arrayBar.style.backgroundColor = \"lightgrey\";\r\n      }\r\n    }\r\n\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(10, 1000));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n  quickSort() {}\r\n\r\n  heapSort() {}\r\n\r\n  bubbleSort() {}\r\n\r\n  // testSortingAlgorithms() {\r\n  //   for (let i = 0; i < 100; i++) {\r\n  //     const array = [];\r\n  //     const length = randomIntFromInterval(1, 1000);\r\n  //     for (let j = 0; j < length; j++) {\r\n  //       array.push(randomIntFromInterval(-1000, 1000));\r\n  //     }\r\n  //     const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n  //     const mergeSortedArray = mergeSort(array.slice());\r\n  //     console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n  //   }\r\n  // }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div id=\"wrap\">\r\n          <div id=\"buttons-container\">\r\n            <button onClick={() => this.generateRandomArray()}>\r\n              Generate New Array\r\n            </button>\r\n            <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n            <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n            <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n            <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n            <button onClick={() => this.testSortingAlgorithms()}>\r\n              Test Sorting Algorithms\r\n            </button>\r\n          </div>\r\n          <div className=\"array-container\">\r\n            {array.map((value, idx) => (\r\n              <div\r\n                className=\"array-bar\"\r\n                key={idx}\r\n                style={{ height: `${value / 10}vh` }}\r\n              ></div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n// function arraysAreEqual(array1, array2) {\r\n//   if (array1.length !== array2.length) return false;\r\n//   for (let i = 0; i < array1.length; i++) {\r\n//     if (array1[i] !== array2[i]) return false;\r\n//   }\r\n//   return true;\r\n// }\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { SortingVisualizer } from \"./SortingVisualizer/SortingVisualizer.jsx\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <SortingVisualizer></SortingVisualizer>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}