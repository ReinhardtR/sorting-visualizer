{"version":3,"sources":["SortingVisualizer/Algorithms/mergeSort.js","SortingVisualizer/SortingVisualizer.jsx","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","i","j","k","push","doMerge","PRIMARY_COLOR","SortingVisualizer","props","state","numberOfArrayBars","animationSpeed","animationIsRunning","autoRun","closedUI","this","generateRandomArray","setTimeout","resetArrayBarsColor","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","backgroundColor","newHeight","barOne","height","mergeSort","UI","id","className","onClick","disabled","trackStyle","handle","amountHandle","defaultValue","onChange","value","timeHandle","checked","timeoutCollection","removeAll","onColor","onHandleColor","handleDiameter","uncheckedIcon","checkedIcon","boxShadow","activeBoxShadow","width","display","tabIndex","onKeyPress","key","alert","code","map","idx","React","Component","dragging","index","restProps","prefixCls","overlay","visible","placement","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f2072010.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  let k = startIdx;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Slider, { SliderTooltip, Handle } from \"rc-slider\";\r\nimport Switch from \"react-switch\";\r\nimport { timeoutCollection } from \"time-events-manager\";\r\nimport \"rc-slider/assets/index.css\";\r\nimport \"./SortingVisualizer.css\";\r\n\r\n// Sorting Algorithms\r\nimport { getMergeSortAnimations } from \"./Algorithms/mergeSort.js\";\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = \"turquoise\";\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = \"yellow\";\r\n\r\n// This is the color of the array bar shortly after its height has been changed.\r\nconst TERTIARY_COLOR = \"red\";\r\n\r\nexport class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n      numberOfArrayBars: 50,\r\n      animationSpeed: 50,\r\n      animationIsRunning: false,\r\n      autoRun: false,\r\n      closedUI: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.generateRandomArray();\r\n  }\r\n\r\n  generateRandomArray() {\r\n    setTimeout(() => {\r\n      resetArrayBarsColor();\r\n    }, this.state.animationSpeed);\r\n\r\n    // Generate the random array and set state.\r\n    const array = [];\r\n    for (let i = 0; i < this.state.numberOfArrayBars - 1; i++) {\r\n      array.push(randomIntFromInterval(10, 1000));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  mergeSort() {\r\n    // Run merge sort algorithm to get list of animations in order.\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (!this.state.animationIsRunning) return;\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2; // Every third element of the array.\r\n      if (isColorChange) {\r\n        // Change the color of the two array bars being compared.\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.animationSpeed);\r\n      } else {\r\n        setTimeout(() => {\r\n          // Set the height of an array bar.\r\n          // Temporarily change the color of that array bar.\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOne = arrayBars[barOneIdx];\r\n          barOne.style.height = `${newHeight / 10}vh`;\r\n          barOne.style.backgroundColor = TERTIARY_COLOR;\r\n          setTimeout(() => {\r\n            barOne.style.backgroundColor = PRIMARY_COLOR;\r\n          }, this.state.animationSpeed);\r\n        }, i * this.state.animationSpeed);\r\n      }\r\n    }\r\n    // After animations are done.\r\n    setTimeout(() => {\r\n      resetArrayBarsColor();\r\n      setTimeout(() => {\r\n        if (this.state.autoRun) {\r\n          this.generateRandomArray();\r\n          this.mergeSort();\r\n        } else {\r\n          this.setState({ animationIsRunning: false });\r\n        }\r\n      }, this.state.animationSpeed);\r\n    }, animations.length * this.state.animationSpeed);\r\n  }\r\n\r\n  // testSortingAlgorithms() {\r\n  //   for (let i = 0; i < 100; i++) {\r\n  //     const array = [];\r\n  //     const length = randomIntFromInterval(1, 1000);\r\n  //     for (let j = 0; j < length; j++) {\r\n  //       array.push(randomIntFromInterval(-1000, 1000));\r\n  //     }\r\n  //     const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n  //     const mergeSortedArray = mergeSort(array.slice());\r\n  //     console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n  //   }\r\n  // }\r\n\r\n  render() {\r\n    var UI;\r\n    if (!this.state.closedUI) {\r\n      UI = (\r\n        <div id=\"ui\" className=\"open-ui\">\r\n          <div id=\"upper-ui-wrap\">\r\n            <div className=\"section-title\">Actions</div>\r\n            <button\r\n              className=\"ui-button\"\r\n              onClick={() => this.generateRandomArray()}\r\n              disabled={this.state.animationIsRunning}\r\n            >\r\n              New Array\r\n            </button>\r\n            <button\r\n              className=\"ui-button\"\r\n              onClick={() => {\r\n                this.setState({ animationIsRunning: true }, () =>\r\n                  this.mergeSort()\r\n                );\r\n              }}\r\n              disabled={this.state.animationIsRunning}\r\n            >\r\n              Merge Sort\r\n            </button>\r\n            <div className=\"section-title\">Settings</div>\r\n            <div className=\"slider-title\">Number of Bars</div>\r\n            <Slider\r\n              className=\"slider\"\r\n              trackStyle={{ backgroundColor: PRIMARY_COLOR }}\r\n              handle={amountHandle}\r\n              defaultValue={this.state.numberOfArrayBars}\r\n              min={1}\r\n              max={100}\r\n              onChange={(value) => {\r\n                this.setState({ numberOfArrayBars: value });\r\n                this.generateRandomArray();\r\n              }}\r\n              disabled={this.state.animationIsRunning}\r\n            />\r\n            <div className=\"slider-title\">Animation Delay</div>\r\n            <Slider\r\n              className=\"slider\"\r\n              trackStyle={{ backgroundColor: PRIMARY_COLOR }}\r\n              handle={timeHandle}\r\n              defaultValue={this.state.numberOfArrayBars}\r\n              min={1}\r\n              max={100}\r\n              onChange={(value) => {\r\n                this.setState({ animationSpeed: value });\r\n              }}\r\n              disabled={this.state.animationIsRunning}\r\n            />\r\n            <div className=\"slider-title\"> Auto Run </div>\r\n            <label>\r\n              <Switch\r\n                checked={this.state.autoRun}\r\n                onChange={() =>\r\n                  this.setState(\r\n                    { autoRun: !this.state.autoRun, animationIsRunning: false },\r\n                    () => {\r\n                      timeoutCollection.removeAll();\r\n                      this.generateRandomArray();\r\n                    }\r\n                  )\r\n                }\r\n                onColor=\"#40e0d0\"\r\n                onHandleColor=\"#fff\"\r\n                handleDiameter={21}\r\n                uncheckedIcon={false}\r\n                checkedIcon={false}\r\n                boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\r\n                activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\r\n                height={20}\r\n                width={48}\r\n                className=\"switch\"\r\n              />\r\n            </label>\r\n          </div>\r\n          <div id=\"bottom-ui-wrap\">\r\n            <div className=\"text-wrap\">\r\n              <div style={{ display: \"flex\" }}>\r\n                <div>Press</div>\r\n                <div className=\"colored-text\">&nbsp;Space&nbsp;</div>\r\n              </div>\r\n              <div>to merge sort.</div>\r\n            </div>\r\n            <div className=\"text-wrap\">\r\n              <div style={{ display: \"flex\" }}>\r\n                <div>Press</div>\r\n                <div className=\"colored-text\">&nbsp;Enter&nbsp;</div>\r\n              </div>\r\n              <div>to minimze the menu.</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div\r\n          id=\"wrap\"\r\n          tabIndex={-1}\r\n          onKeyPress={(key) => {\r\n            if (this.state.animationIsRunning) {\r\n              alert(\r\n                \"The array is being sorted.\\nWait for it to finish or refresh the website.\"\r\n              );\r\n            } else if (key.code === \"Enter\") {\r\n              this.setState({ closedUI: !this.state.closedUI });\r\n            } else if (key.code === \"Space\") {\r\n              this.setState({ animationIsRunning: true }, () =>\r\n                this.mergeSort()\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          {UI}\r\n          <div className=\"array-container\">\r\n            {this.state.array.map((value, idx) => (\r\n              <div\r\n                className=\"array-bar\"\r\n                key={idx}\r\n                style={{ height: `${value / 10}vh` }}\r\n              ></div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n// function arraysAreEqual(array1, array2) {\r\n//   if (array1.length !== array2.length) return false;\r\n//   for (let i = 0; i < array1.length; i++) {\r\n//     if (array1[i] !== array2[i]) return false;\r\n//   }\r\n//   return true;\r\n// }\r\n\r\nconst resetArrayBarsColor = () => {\r\n  const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n  if (arrayBars) {\r\n    for (let arrayBar of arrayBars) {\r\n      arrayBar.style.backgroundColor = \"white\";\r\n    }\r\n  }\r\n};\r\n\r\nconst amountHandle = (props) => {\r\n  const { value, dragging, index, ...restProps } = props;\r\n  return (\r\n    <SliderTooltip\r\n      prefixCls=\"rc-slider-tooltip\"\r\n      overlay={`${value}`}\r\n      visible={dragging}\r\n      placement=\"bottom\"\r\n      key={index}\r\n    >\r\n      <Handle value={value} {...restProps} />\r\n    </SliderTooltip>\r\n  );\r\n};\r\n\r\nconst timeHandle = (props) => {\r\n  const { value, dragging, index, ...restProps } = props;\r\n  return (\r\n    <SliderTooltip\r\n      prefixCls=\"rc-slider-tooltip\"\r\n      overlay={`${value} ms`}\r\n      visible={dragging}\r\n      placement=\"bottom\"\r\n      key={index}\r\n    >\r\n      <Handle value={value} {...restProps} />\r\n    </SliderTooltip>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport { SortingVisualizer } from \"./SortingVisualizer/SortingVisualizer.jsx\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <SortingVisualizer></SortingVisualizer>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}