{"version":3,"sources":["SortingVisualizer/Algorithms/mergeSort.js","SortingVisualizer/SortingVisualizer.jsx","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","i","j","k","push","doMerge","PRIMARY_COLOR","SortingVisualizer","props","state","numberOfArrayBars","animationSpeed","animationIsRunning","this","generateRandomArray","min","max","random","setState","console","log","arrayBars","document","getElementsByClassName","isColorChange","setTimeout","style","backgroundColor","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","newHeight","barOne","height","id","onClick","disabled","mergeSort","className","trackStyle","handle","amountHandle","defaultValue","onChange","value","timeHandle","map","idx","React","Component","dragging","index","restProps","prefixCls","overlay","visible","placement","ReactDOM","render","StrictMode","getElementById"],"mappings":"oTAAO,SAASA,EAAuBC,GACrC,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,EAC9B,IAAMG,EAAiBH,EAAMI,QAE7B,OADAC,EAAgBL,EAAO,EAAGA,EAAME,OAAS,EAAGC,EAAgBF,GACrDA,EAGT,SAASI,EACPC,EACAC,EACAC,EACAL,EACAF,GAEA,GAAIM,IAAaC,EAAjB,CACA,IAAMC,EAAYC,KAAKC,OAAOJ,EAAWC,GAAU,GACnDH,EAAgBF,EAAgBI,EAAUE,EAAWH,EAAWL,GAChEI,EAAgBF,EAAgBM,EAAY,EAAGD,EAAQF,EAAWL,GAIpE,SACEK,EACAC,EACAE,EACAD,EACAL,EACAF,GAEA,IAAIW,EAAIL,EACJM,EAAIJ,EAAY,EAChBK,EAAIP,EACR,KAAOK,GAAKH,GAAaI,GAAKL,GAG5BP,EAAWc,KAAK,CAACH,EAAGC,IAGpBZ,EAAWc,KAAK,CAACH,EAAGC,IAChBV,EAAeS,IAAMT,EAAeU,IAGtCZ,EAAWc,KAAK,CAACD,EAAGX,EAAeS,KACnCN,EAAUQ,KAAOX,EAAeS,OAIhCX,EAAWc,KAAK,CAACD,EAAGX,EAAeU,KACnCP,EAAUQ,KAAOX,EAAeU,MAGpC,KAAOD,GAAKH,GAGVR,EAAWc,KAAK,CAACH,EAAGA,IAGpBX,EAAWc,KAAK,CAACH,EAAGA,IAGpBX,EAAWc,KAAK,CAACD,EAAGX,EAAeS,KACnCN,EAAUQ,KAAOX,EAAeS,KAElC,KAAOC,GAAKL,GAGVP,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACD,EAAGX,EAAeU,KACnCP,EAAUQ,KAAOX,EAAeU,KAvDlCG,CAAQV,EAAWC,EAAUE,EAAWD,EAAQL,EAAgBF,ICVlE,IAAMgB,EAAgB,YAQTC,EAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXpB,MAAO,GACPqB,kBAAmB,GACnBC,eAAgB,GAChBC,oBAAoB,GAPL,EADrB,gEAaIC,KAAKC,wBAbT,4CAmBI,IADA,IAgI2BC,EAAKC,EAhI1B3B,EAAQ,GACLY,EAAI,EAAGA,EAAIY,KAAKJ,MAAMC,kBAAoB,EAAGT,IACpDZ,EAAMe,MA8HmBW,EA9HQ,GA8HHC,EA9HO,IA+HlCjB,KAAKC,MAAMD,KAAKkB,UAAYD,EAAMD,EAAM,GAAKA,KA7HlDF,KAAKK,SAAS,CAAE7B,YAtBpB,kCAyBe,IAAD,OACV8B,QAAQC,IAAIP,KAAKJ,MAAMpB,OAIvB,IADA,IAAMC,EAAaF,EAAuByB,KAAKJ,MAAMpB,OAJ3C,WAKDY,GACP,IAAMoB,EAAYC,SAASC,uBAAuB,aAC5CC,EAAgBvB,EAAI,IAAM,EAChC,GAAIA,IAAMX,EAAWC,OACnB4B,QAAQC,IAAI,MACZK,YAAW,WACTA,YAAW,WAAO,IAAD,gBACMJ,GADN,IACf,2BAAgC,SACrBK,MAAMC,gBAAkB,SAFpB,iCAId,EAAKlB,MAAME,gBACd,EAAKO,SAAS,CAAEN,oBAAoB,MACnCX,EAAI,EAAKQ,MAAME,qBACb,GAAIa,EAAe,mBAEOlC,EAAWW,GAFlB,GAEjB2B,EAFiB,KAENC,EAFM,KAGlBC,EAAcT,EAAUO,GAAWF,MACnCK,EAAcV,EAAUQ,GAAWH,MACnCM,EAAQ/B,EAAI,IAAM,EArDR,MAqD8BK,EAC9CmB,YAAW,WACTK,EAAYH,gBAAkBK,EAC9BD,EAAYJ,gBAAkBK,IAC7B/B,EAAI,EAAKQ,MAAME,qBAElBc,YAAW,WAAM,kBAGgBnC,EAAWW,GAH3B,GAGR2B,EAHQ,KAGGK,EAHH,KAITC,EAASb,EAAUO,GACzBM,EAAOR,MAAMS,OAAb,UAAyBF,EAAY,GAArC,MACAC,EAAOR,MAAMC,gBA9DA,SA+DbF,YAAW,WACTS,EAAOR,MAAMC,gBAAkBrB,IAC9B,EAAKG,MAAME,kBACbV,EAAI,EAAKQ,MAAME,iBAlCbV,EAAI,EAAGA,GAAKX,EAAWC,OAAQU,IAAM,EAArCA,KA9Bb,+BAkFY,IAAD,OACP,OACE,mCACE,sBAAKmC,GAAG,OAAR,UACE,sBAAKA,GAAG,KAAR,UACE,wBACEC,QAAS,kBAAM,EAAKvB,uBACpBwB,SAAUzB,KAAKJ,MAAMG,mBAFvB,gCAMA,wBACEyB,QAAS,WACP,EAAKnB,SAAS,CAAEN,oBAAoB,IAAQ,kBAC1C,EAAK2B,gBAGTD,SAAUzB,KAAKJ,MAAMG,mBANvB,wBAUA,qBAAK4B,UAAU,eAAf,4BACA,cAAC,IAAD,CACEA,UAAU,SACVC,WAAY,CAAEd,gBAAiBrB,GAC/BoC,OAAQC,EACRC,aAAc/B,KAAKJ,MAAMC,kBACzBK,IAAK,EACLC,IAAK,IACL6B,SAAU,SAACC,GACT,EAAK5B,SAAS,CAAER,kBAAmBoC,IACnC,EAAKhC,uBAEPwB,SAAUzB,KAAKJ,MAAMG,qBAEvB,qBAAK4B,UAAU,eAAf,6BACA,cAAC,IAAD,CACEA,UAAU,SACVC,WAAY,CAAEd,gBAAiBrB,GAC/BoC,OAAQK,EACRH,aAAc/B,KAAKJ,MAAMC,kBACzBK,IAAK,EACLC,IAAK,IACL6B,SAAU,SAACC,GACT,EAAK5B,SAAS,CAAEP,eAAgBmC,KAElCR,SAAUzB,KAAKJ,MAAMG,wBAGzB,qBAAK4B,UAAU,kBAAf,SACG3B,KAAKJ,MAAMpB,MAAM2D,KAAI,SAACF,EAAOG,GAAR,OACpB,qBACET,UAAU,YAEVd,MAAO,CAAES,OAAO,GAAD,OAAKW,EAAQ,GAAb,QADVG,iBAvIrB,GAAuCC,IAAMC,WA8J7C,IAAMR,EAAe,SAACnC,GAAW,IACvBsC,EAAyCtC,EAAzCsC,MAAOM,EAAkC5C,EAAlC4C,SAAUC,EAAwB7C,EAAxB6C,MAAUC,EADL,YACmB9C,EADnB,8BAE9B,OACE,cAAC,IAAD,CACE+C,UAAU,oBACVC,QAAO,UAAKV,GACZW,QAASL,EACTM,UAAU,SAJZ,SAOE,cAAC,IAAD,aAAQZ,MAAOA,GAAWQ,KAFrBD,IAOLN,EAAa,SAACvC,GAAW,IACrBsC,EAAyCtC,EAAzCsC,MAAOM,EAAkC5C,EAAlC4C,SAAUC,EAAwB7C,EAAxB6C,MAAUC,EADP,YACqB9C,EADrB,8BAE5B,OACE,cAAC,IAAD,CACE+C,UAAU,oBACVC,QAAO,UAAKV,EAAL,OACPW,QAASL,EACTM,UAAU,SAJZ,SAOE,cAAC,IAAD,aAAQZ,MAAOA,GAAWQ,KAFrBD,IChMXM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvC,SAASwC,eAAe,W","file":"static/js/main.73f80add.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  let k = startIdx;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Slider, { SliderTooltip, Handle } from \"rc-slider\";\r\nimport \"rc-slider/assets/index.css\";\r\nimport \"./SortingVisualizer.css\";\r\n\r\n// Sorting Algorithms\r\nimport { getMergeSortAnimations } from \"./Algorithms/mergeSort.js\";\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = \"turquoise\";\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = \"red\";\r\n\r\n// This is the color of the array bar shortly after its height has been changed.\r\nconst TERTIARY_COLOR = \"yellow\";\r\n\r\nexport class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n      numberOfArrayBars: 50,\r\n      animationSpeed: 50,\r\n      animationIsRunning: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.generateRandomArray();\r\n  }\r\n\r\n  generateRandomArray() {\r\n    // Generate the random array and set state.\r\n    const array = [];\r\n    for (let i = 0; i < this.state.numberOfArrayBars - 1; i++) {\r\n      array.push(randomIntFromInterval(10, 1000));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  mergeSort() {\r\n    console.log(this.state.array);\r\n    // Run merge sort algorithm.\r\n    // To get list of animations in order.\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i <= animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2; // Every third element of the array.\r\n      if (i === animations.length) {\r\n        console.log(\"in\");\r\n        setTimeout(() => {\r\n          setTimeout(() => {\r\n            for (let arrayBar of arrayBars) {\r\n              arrayBar.style.backgroundColor = \"white\";\r\n            }\r\n          }, this.state.animationSpeed);\r\n          this.setState({ animationIsRunning: false });\r\n        }, i * this.state.animationSpeed);\r\n      } else if (isColorChange) {\r\n        // Change the color of the two array bars being compared.\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.animationSpeed);\r\n      } else {\r\n        setTimeout(() => {\r\n          // Set the height of an array bar.\r\n          // Temporarily change the color of that array bar.\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOne = arrayBars[barOneIdx];\r\n          barOne.style.height = `${newHeight / 10}vh`;\r\n          barOne.style.backgroundColor = TERTIARY_COLOR;\r\n          setTimeout(() => {\r\n            barOne.style.backgroundColor = PRIMARY_COLOR;\r\n          }, this.state.animationSpeed);\r\n        }, i * this.state.animationSpeed);\r\n      }\r\n    }\r\n  }\r\n\r\n  // testSortingAlgorithms() {\r\n  //   for (let i = 0; i < 100; i++) {\r\n  //     const array = [];\r\n  //     const length = randomIntFromInterval(1, 1000);\r\n  //     for (let j = 0; j < length; j++) {\r\n  //       array.push(randomIntFromInterval(-1000, 1000));\r\n  //     }\r\n  //     const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n  //     const mergeSortedArray = mergeSort(array.slice());\r\n  //     console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n  //   }\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div id=\"wrap\">\r\n          <div id=\"ui\">\r\n            <button\r\n              onClick={() => this.generateRandomArray()}\r\n              disabled={this.state.animationIsRunning}\r\n            >\r\n              Generate New Array\r\n            </button>\r\n            <button\r\n              onClick={() => {\r\n                this.setState({ animationIsRunning: true }, () =>\r\n                  this.mergeSort()\r\n                );\r\n              }}\r\n              disabled={this.state.animationIsRunning}\r\n            >\r\n              Merge Sort\r\n            </button>\r\n            <div className=\"slider-title\">Number of Bars</div>\r\n            <Slider\r\n              className=\"slider\"\r\n              trackStyle={{ backgroundColor: PRIMARY_COLOR }}\r\n              handle={amountHandle}\r\n              defaultValue={this.state.numberOfArrayBars}\r\n              min={1}\r\n              max={100}\r\n              onChange={(value) => {\r\n                this.setState({ numberOfArrayBars: value });\r\n                this.generateRandomArray();\r\n              }}\r\n              disabled={this.state.animationIsRunning}\r\n            />\r\n            <div className=\"slider-title\">Animation Delay</div>\r\n            <Slider\r\n              className=\"slider\"\r\n              trackStyle={{ backgroundColor: PRIMARY_COLOR }}\r\n              handle={timeHandle}\r\n              defaultValue={this.state.numberOfArrayBars}\r\n              min={1}\r\n              max={100}\r\n              onChange={(value) => {\r\n                this.setState({ animationSpeed: value });\r\n              }}\r\n              disabled={this.state.animationIsRunning}\r\n            />\r\n          </div>\r\n          <div className=\"array-container\">\r\n            {this.state.array.map((value, idx) => (\r\n              <div\r\n                className=\"array-bar\"\r\n                key={idx}\r\n                style={{ height: `${value / 10}vh` }}\r\n              ></div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n// function arraysAreEqual(array1, array2) {\r\n//   if (array1.length !== array2.length) return false;\r\n//   for (let i = 0; i < array1.length; i++) {\r\n//     if (array1[i] !== array2[i]) return false;\r\n//   }\r\n//   return true;\r\n// }\r\n\r\nconst amountHandle = (props) => {\r\n  const { value, dragging, index, ...restProps } = props;\r\n  return (\r\n    <SliderTooltip\r\n      prefixCls=\"rc-slider-tooltip\"\r\n      overlay={`${value}`}\r\n      visible={dragging}\r\n      placement=\"bottom\"\r\n      key={index}\r\n    >\r\n      <Handle value={value} {...restProps} />\r\n    </SliderTooltip>\r\n  );\r\n};\r\n\r\nconst timeHandle = (props) => {\r\n  const { value, dragging, index, ...restProps } = props;\r\n  return (\r\n    <SliderTooltip\r\n      prefixCls=\"rc-slider-tooltip\"\r\n      overlay={`${value} ms`}\r\n      visible={dragging}\r\n      placement=\"bottom\"\r\n      key={index}\r\n    >\r\n      <Handle value={value} {...restProps} />\r\n    </SliderTooltip>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport { SortingVisualizer } from \"./SortingVisualizer/SortingVisualizer.jsx\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <SortingVisualizer></SortingVisualizer>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}